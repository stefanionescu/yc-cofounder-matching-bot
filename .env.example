# A target time (in UTC) at which the bot can execute. Used when the bot is deployed to Heroku and you don't want it to run at
# random times when Heroku decides to respawn the container
# Do not set this var when you run locally
TARGET_TIME_UTC = "08:00"

# Wiggle room (number of minutes) around the TARGET_TIME_UTC in which the bot can execute
TARGET_TIME_WIGGLE_ROOM = "60"

# Whether to use a SmartProxy proxy or not 
USE_PROXY = "true/false"

# SmartProxy params
SMART_PROXY_USERNAME = ''
SMART_PROXY_PASSWORD = ''
SMART_PROXY_ENDPOINT = ''
SMART_PROXY_PORT = ''

# Your Startup School username and password
YC_USERNAME = ''
YC_PASSWORD = ''
# An array of cities you want the bot to search in; make sure each city is separated by semicolons like in the example
# The array can be empty or you can completely omit this var, in which case the bot won't change your location
YC_CITIES = "London, UK;San Francisco, CA;New York, NY, USA"
# The city to return to after the search is done
CITY_TO_RETURN_TO = "London, UK"

# Tell the bot how long it should run for
# This value should be at least 600 (10 minutes) so that the bot has enough time to find at least a couple cofounders
# The value should not exceed 3600 (1 hour)
BOT_MAX_RUN_TIME = 3600

# Whether the bot should search for cofounders when you've already hit the weekly limit
SEARCH_WHEN_LIMIT_REACHED = "true/false"

# Tell the bot whether it should contact cofounders or not
CONTACT_COFOUNDERS = "true/false"

# The max number of founders to contact during a run; must be greater than zero if CONTACT_COFOUNDERS is true
MAX_PROFILES_TO_CONTACT = 1

# Whether to skip YC alumni or not
SKIP_YC_ALUMNI = "true/false"

# Whether to skip people who already have a cofounder
SKIP_FOUNDER_WITH_EXISTING_COFOUNDER = "true/false"

# Shared interests that the founder must have. 
# You can add different groups of interests and if the founder has at least one whole group in common with you, the bot will save their profile and/or contact them
# Separate different groups using semicolons
# Separate different interests in the same group using commas (with no space in between words). The example below has two groups: Consumer and Entertainment + Gaming
IMPORTANT_SHARED_INTERESTS = "Consumer;Entertainment,Gaming"

# Tell the bot whether it should use GPT to analyze cofounder profiles
ANALYZE_PROFILES_WITH_GPT = "true/false"
# Your OpenAI API key. The var name *must* be OPENAI_API_KEY
OPENAI_API_KEY = ''
# Your ChatGPT organization ID
CHAT_GPT_ORGANIZATION = ''
# Your project ID
CHAT_GPT_PROJECT_ID = ''

# The questions sent to GPT in order to analyze a founder's profile. Each question must be answered with a Yes or a No.
# If at least one of the questions is answered with Yes, GPT will not contact founders and instead it will save their profiles.
# If all questions are answered with No, GPT will contact founders (if you specified that you want to contact them)
CHAT_GPT_QUESTIONS = "Does this person have less than 3 years of professional experience?"

# Email info so you can get reports from the bot
EMAIL_FROM = ""
EMAIL_FROM_PASSWORD = ""
EMAIL_TO = ""

# Your Sendgrid API key so you can actually send emails. Sign up for an account at https://login.sendgrid.com/
SENDGRID_API_KEY = ""